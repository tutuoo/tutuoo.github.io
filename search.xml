<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Kotlin 学习笔记（1）基本语法]]></title>
      <url>/2017/06/07/kotlin/</url>
      <content type="html"><![CDATA[<p>关于 Kotlin 的安装，Android studio 3.0及以上自带，其他的可以通过搜索插件 Kotlin 来进行安装。下面来说说有关 Kotlin 的语法。</p>
<p>以下是本人的学习笔记，入有任何不妥之处，随时欢迎拍砖指正。<br>谢谢 <code>^_^</code></p>
<h3 id="1-Kotlin-Android-扩展"><a href="#1-Kotlin-Android-扩展" class="headerlink" title="1. Kotlin Android 扩展"></a>1. Kotlin Android 扩展</h3><p>Kotlin 插件自带有安卓扩展，因此不需要再单独安装额外插件。</p>
<p>我们仅需要在项目 module 的 build.gradle 文件中启用 Gradle 安卓扩展插件即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;kotlin-android-extensions&apos;</div></pre></td></tr></table></figure>
<p>这样我们就可以用简写了，比如在 XML 中定义一个 TextView</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;TextView</div><div class="line">        android:id=&quot;@+id/hello&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;Hello World!&quot;/&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>我这里 ID 设置为『hello』那么我们在 Activity 中的代码就变成了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class KotlinActivity : AppCompatActivity() &#123;</div><div class="line"></div><div class="line">    override fun onCreate(savedInstanceState: Bundle?) &#123;</div><div class="line">        super.onCreate(savedInstanceState)</div><div class="line">        setContentView(R.layout.activity_kotlin)</div><div class="line">        hello.text = &quot;你是不是傻&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样直接通过 hello.text 来设置内容，而不是原来长长的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">findView(R.id.textView) as TextView</div></pre></td></tr></table></figure>
<p>该插件相当于把 XML 中的控件『id』作为 Activity 的额外属性来使用。<br>简洁了很多~~</p>
<h3 id="2-定义函数"><a href="#2-定义函数" class="headerlink" title="2. 定义函数"></a>2. 定义函数</h3><p>Kotlin 中所有的函数直接通过 fun 来声明。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fun sum(a: Int , b: Int) : Int&#123;</div><div class="line">    return a + b</div><div class="line">&#125;</div><div class="line"></div><div class="line">fun sum(a: Int, b: Int) = a + b</div></pre></td></tr></table></figure>
<p>上面两种方式都可以通过以下代码来调用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">println(sum(3, 5))</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 输出如下：</div><div class="line">I/System.out: 8</div></pre></td></tr></table></figure>
<h3 id="3-定义局部变量"><a href="#3-定义局部变量" class="headerlink" title="3. 定义局部变量"></a>3. 定义局部变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">val a: Int = 1  // 立即初始化</div><div class="line">val b = 2   // 推导出Int型</div><div class="line">val c: Int  // 当没有初始化值时必须声明类型</div><div class="line">c = 3       // 赋值</div><div class="line">println(&quot;a = $a, b = $b, c = $c&quot;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var x = 5 // 推导出Int类型</div><div class="line">x += 1</div><div class="line">println(&quot; x = $x&quot;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 输出如下：</div><div class="line">I/System.out: x = 6</div></pre></td></tr></table></figure>
<h3 id="4-注释"><a href="#4-注释" class="headerlink" title="4. 注释"></a>4. 注释</h3><p>与 Java 和 JavaScript 一样，Kotlin 支持单行注释和块注释。</p>
<h3 id="5-使用字符串模板"><a href="#5-使用字符串模板" class="headerlink" title="5. 使用字符串模板"></a>5. 使用字符串模板</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var a = 1</div><div class="line">// 使用变量名作为模板:</div><div class="line">val s1 = &quot;a is $a&quot;</div><div class="line">println(s1)</div><div class="line"></div><div class="line">a = 2</div><div class="line">// 使用表达式作为模板:</div><div class="line">val s2 = &quot;$&#123;s1.replace(&quot;is&quot;, &quot;was&quot;)&#125;, but now is $a&quot;</div><div class="line">println(s2)</div><div class="line">println(s1)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 输出如下：</div><div class="line">I/System.out: a is 1</div><div class="line">I/System.out: a was 1, but now is 2                   </div><div class="line">I/System.out: a is 1</div></pre></td></tr></table></figure>
<p>我发现在 val s2 中通过 replace 修改了 s1 的值，但是在最后的输出 s1 时，s1 的值并没有改变。<br>通过进入 replac 方法得知使用该方法后的字符串会重新生成新的字符串，并不改变原值~O(∩_∩)O哈哈~ 一看就是我 Java 基础没学好~<br>附图：<br><img src="http://opmmds7g1.bkt.clouddn.com/md/1496646577531.png" width="961"></p>
<h3 id="6-使用条件表达式"><a href="#6-使用条件表达式" class="headerlink" title="6. 使用条件表达式"></a>6. 使用条件表达式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fun maxOf(a: Int, b: Int): Int &#123;</div><div class="line">    if (a &gt; b) &#123;</div><div class="line">        return a</div><div class="line">    &#125; else &#123;</div><div class="line">        return b</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fun maxOf(a: Int, b: Int) = if (a &gt; b) a else b</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">println(&quot;我今年$&#123;maxOf(0, 18)&#125;岁了.&quot;)</div><div class="line">hello.text = &quot;我今年$&#123;maxOf(0, 18)&#125;岁了.&quot;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 输出如下：</div><div class="line">I/System.out: 我今年18岁了.</div></pre></td></tr></table></figure>
<p><img src="http://opmmds7g1.bkt.clouddn.com/md/1496647796385.png" width="396"></p>
<p>以上两种方式都可以表达。</p>
<h3 id="7-使用可空变量以及空值检查"><a href="#7-使用可空变量以及空值检查" class="headerlink" title="7. 使用可空变量以及空值检查"></a>7. 使用可空变量以及空值检查</h3><p>开发中最常见的错误应该就是<code>NullPointerException</code>了，那么 Kotlin 是怎么解决这个问题的呢?</p>
<h4 id="7-1-可空类型和非空类型"><a href="#7-1-可空类型和非空类型" class="headerlink" title="7.1 可空类型和非空类型"></a>7.1 可空类型和非空类型</h4><p>Kotlin 中用 ? 来表示该变量是否可以为空。下面看实例</p>
<p><img src="http://opmmds7g1.bkt.clouddn.com/md/1496710862973.png" width="214"><br>当我们没有明确 String 可以为空的情况下，当 String 赋予null 时，会报错，导致无法运行。</p>
<p>前者我们可以直接调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">val l2 = a2.length</div><div class="line">但是后者</div><div class="line">val l3 = a3.length</div></pre></td></tr></table></figure>
<p>我们不可以直接调用，因为 a3 可能为空，这里我们就要用到条件表达式了</p>
<h4 id="7-2-在条件中检查-null"><a href="#7-2-在条件中检查-null" class="headerlink" title="7.2 在条件中检查 null"></a>7.2 在条件中检查 null</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">val l3 = if (a3 != null) a3.length else -1</div><div class="line"></div><div class="line">// 输出如下：</div><div class="line">I/System.out: 3</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if (a3 != null &amp;&amp; a3.isNotEmpty())</div><div class="line">    println(&quot;Stirng of length $&#123;a3.length&#125;&quot;)</div><div class="line">else</div><div class="line">    println(&quot;Empty string&quot;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 输出如下：</div><div class="line">I/System.out: Stirng of length 3</div></pre></td></tr></table></figure>
<h4 id="7-3-安全调用"><a href="#7-3-安全调用" class="headerlink" title="7.3 安全调用"></a>7.3 安全调用</h4><p>使用安全操作符，<code>?.</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a3?.length</div></pre></td></tr></table></figure>
<p>如果 <code>a3</code> 不为空则返回长度，否则返回空。<br>这个表达式的的类型是<code>Int?</code></p>
<p>安全调用在链式调用是是很有用的。比如，如果 Bob 是一个雇员可能分配部门(也可能不分配)，如果我们想获取 Bob 的部门名作为名字的前缀，就可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bob?.department?.head?.name</div></pre></td></tr></table></figure>
<p>这样的调用链在任何一个属性为空都会返回空。</p>
<h4 id="7-4-Elvis-操作符"><a href="#7-4-Elvis-操作符" class="headerlink" title="7.4 Elvis 操作符"></a>7.4 Elvis 操作符</h4><p>使用 Elvis 操作符，<code>?:</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">val l = b.length?: -1</div></pre></td></tr></table></figure>
<p>如果 <code>?:</code> 左边表达式不为空则返回，否则返回右边的表达式。注意右边的表达式只有在左边表达式为空才会返回。</p>
<h4 id="7-5-操作符"><a href="#7-5-操作符" class="headerlink" title="7.5 !! 操作符"></a>7.5 !! 操作符</h4><p>用 b!! ，这会返回一个非空的 b 或者抛出一个 b 为空的 NPE</p>
<p><code>val l = b !!.length</code></p>
<h4 id="7-6-安全转换"><a href="#7-6-安全转换" class="headerlink" title="7.6 安全转换"></a>7.6 安全转换</h4><p>普通的转换可能产生 ClassCastException 异常。另一个选择就是使用安全转换，如果不成功就返回空：</p>
<p><img src="http://opmmds7g1.bkt.clouddn.com/md/1496732611142.png" width="256"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var b = &quot;aaa&quot;</div><div class="line">val aInt: Int? = b as? Int</div><div class="line">println(aInt)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输出如下：</div><div class="line">I/System.out: null</div></pre></td></tr></table></figure>
<p>这样如果 b 是 int 的类型的就输出，不是就返回 null<br>而不会像以前一样程序 crash 后报 ClassCastException 异常</p>
<h3 id="8-使用值检查并自动转换"><a href="#8-使用值检查并自动转换" class="headerlink" title="8. 使用值检查并自动转换"></a>8. 使用值检查并自动转换</h3><p>使用 <code>is</code> 操作符检查一个表达式是否是某个类型的实例。如果对不可变的局部变量或属性进行过了类型检查，就没有必要明确转换：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fun printLength(obj: Any) &#123;</div><div class="line">    println(&quot;&apos;$obj&apos; string length is $&#123;getStringLength(obj) ?: &quot;... err, not a string&quot;&#125; &quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">fun getStringLength(obj: Any): Int? &#123;</div><div class="line">  if (obj is String) &#123;</div><div class="line">    // obj 将会在这个分支中自动转换为 String 类型</div><div class="line">    return obj.length</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // obj 在种类检查外仍然是 Any 类型</div><div class="line">  return null</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">printLength(&quot;Incomprehensibilities&quot;)</div><div class="line">printLength(1000)</div><div class="line">printLength(listOf(Any()))</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">输出如下：</div><div class="line">I/System.out: &apos;Incomprehensibilities&apos; string length is 21 </div><div class="line">I/System.out: &apos;1000&apos; string length is ... err, not a string </div><div class="line">I/System.out: &apos;[java.lang.Object@72fd5e4]&apos; string length is ... err, not a string</div></pre></td></tr></table></figure>
<p>当然我们也可以换一种方式来写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">fun getStringLength(obj: Any): Int? &#123;</div><div class="line">  if (obj !is String) return null</div><div class="line"></div><div class="line">  // obj 将会在这个分支中自动转换为 String 类型</div><div class="line">  return obj.length</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>甚至可以这样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">fun getStringLength(obj: Any): Int? &#123;</div><div class="line">    // obj 将会在&amp;&amp;右边自动转换为 String 类型</div><div class="line">  if (obj is String &amp;&amp; obj.length &gt; 0) &#123;</div><div class="line">    return obj.length</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return null</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>以上代码的输出结果是不变的。</strong></p>
<h3 id="9-使用循环"><a href="#9-使用循环" class="headerlink" title="9. 使用循环"></a>9. 使用循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">val items = listOf(&quot;Google&quot;, &quot;Apple&quot;, &quot;Amazon&quot;)</div><div class="line">for (index in items.indices) &#123;</div><div class="line">    println(&quot;item at $index is $&#123;items[index]&#125;&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 输出如下： </div><div class="line">I/System.out: item at 0 is Google</div><div class="line">I/System.out: item at 1 is Apple</div><div class="line">I/System.out: item at 2 is Amazon</div></pre></td></tr></table></figure>
<h3 id="10-使用-while-循环"><a href="#10-使用-while-循环" class="headerlink" title="10. 使用 while 循环"></a>10. 使用 while 循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">val items = listOf(&quot;Google&quot;, &quot;Apple&quot;, &quot;Amazon&quot;)</div><div class="line">var index = 0</div><div class="line">while (index &lt; items.size) &#123;</div><div class="line">    println(&quot;item at $index is $&#123;items[index]&#125;&quot;)</div><div class="line">    index++</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果和 for 循环一样</p>
<h3 id="11-使用-when-表达式"><a href="#11-使用-when-表达式" class="headerlink" title="11. 使用 when 表达式"></a>11. 使用 when 表达式</h3><p>Kotlin 中的 when 表达式就是类似于 Java 中的 switch 语句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">when (obj) &#123;</div><div class="line">  1          -&gt; &quot;One&quot;</div><div class="line">  &quot;Hello&quot;    -&gt; &quot;Greeting&quot;</div><div class="line">  is Long    -&gt; &quot;Long&quot;</div><div class="line">  !is String -&gt; &quot;Not a string&quot;</div><div class="line">  else       -&gt; &quot;Unknown&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">println(describe(1))</div><div class="line">println(describe(&quot;Hello&quot;))</div><div class="line">println(describe(1000L))</div><div class="line">println(describe(2))</div><div class="line">println(describe(&quot;other&quot;))</div></pre></td></tr></table></figure>
<p>参数分别使用了『1』，『Hello』，『1000L』，『2』，『other』<br>分别对应下列的输出。和 switch 语法一模一样，只不过把一些过程给简化了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 输出如下：</div><div class="line">I/System.out: item at 2 is kiwi</div><div class="line">I/System.out: One</div><div class="line">I/System.out: Greeting</div><div class="line">I/System.out: Long</div><div class="line">I/System.out: Not a string</div><div class="line">I/System.out: Unknown</div></pre></td></tr></table></figure>
<p>可能对于第四个有疑惑</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">println(describe(2))</div><div class="line"></div><div class="line">!is String -&gt; &quot;Not a string&quot;</div></pre></td></tr></table></figure>
<p>以上意思是说 2 不是 String 类型的实例，结果为 true 所以输出了 『Not a string』</p>
<h3 id="12-使用ranges"><a href="#12-使用ranges" class="headerlink" title="12. 使用ranges"></a>12. 使用ranges</h3><p><strong>使用 in 操作符检查数值是否在某个范围内：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">val x = 10</div><div class="line">val y = 9</div><div class="line">if (x in 1..y+1) &#123;</div><div class="line">    println(&quot;fits in range&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 输出如下：</div><div class="line">I/System.out: fits in range</div></pre></td></tr></table></figure>
<p>表达式的意思是说 x 是否在 1 ~ y + 1 的范围内<br>从定义的 x 和 y 的值来说，显而易见为 true</p>
<p><strong>检查数值是否在范围外：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">val list = listOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</div><div class="line"></div><div class="line">if (-1 !in 0..list.lastIndex) &#123;</div><div class="line">    println(&quot;list.lastIndex: $&#123;list.lastIndex&#125;&quot;)</div><div class="line">    println(&quot;-1 is out of range&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">if (list.size !in list.indices) &#123;</div><div class="line">    println(&quot;list.indices: $&#123;list.indices&#125;&quot;)</div><div class="line">    println(&quot;list size is out of valid list indices range too&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 输出如下：</div><div class="line">I/System.out: list.lastIndex: 2</div><div class="line">I/System.out: -1 is out of range</div><div class="line">I/System.out: list.indices: 0..2</div><div class="line">I/System.out: list size is out of valid list indices range too</div></pre></td></tr></table></figure>
<p><code>!in</code> 即不属于该范围 -1 不属于0~2，3也不属于0~2<br>所以他们的<code>println</code>语句都输出了。</p>
<p><strong>在范围内迭代或者使用步进：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">for (x in 1..5) &#123;</div><div class="line">  println(x)</div><div class="line">&#125;</div><div class="line"></div><div class="line">println(&quot;----------------&quot;)</div><div class="line"></div><div class="line">for (x in 1..10 step 2) &#123;</div><div class="line">  println(x)</div><div class="line">&#125;</div><div class="line"></div><div class="line">println(&quot;----------------&quot;)</div><div class="line"></div><div class="line">for (x in 9 downTo 0 step 3) &#123;</div><div class="line">  println(x)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// 输出如下：</div><div class="line">I/System.out: 1</div><div class="line">I/System.out: 2</div><div class="line">I/System.out: 3</div><div class="line">I/System.out: 4</div><div class="line">I/System.out: 5</div><div class="line">I/System.out: ----------------</div><div class="line">I/System.out: 1</div><div class="line">I/System.out: 3</div><div class="line">I/System.out: 5</div><div class="line">I/System.out: 7</div><div class="line">I/System.out: 9</div><div class="line">I/System.out: ----------------</div><div class="line">I/System.out: 9</div><div class="line">I/System.out: 6</div><div class="line">I/System.out: 3</div><div class="line">I/System.out: 0</div></pre></td></tr></table></figure>
<p><code>step</code> 跳跃<br><code>downTo</code> 从大到小<br>看了 Log 日志，聪明的你应该懂了吧~~</p>
<h3 id="13-使用集合"><a href="#13-使用集合" class="headerlink" title="13. 使用集合"></a>13. 使用集合</h3><p><strong>对一个集合进行迭代：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">val items = listOf(&quot;Google&quot;, &quot;Apple&quot;, &quot;Amazon&quot;)</div><div class="line">for (item in items) &#123;</div><div class="line">    println(item)</div><div class="line">&#125;</div><div class="line"></div><div class="line">println(&quot;----------------&quot;)</div><div class="line"></div><div class="line">when &#123;</div><div class="line">       &quot;tutu_oo&quot; in items -&gt; println(&quot;Change The World&quot;)</div><div class="line">       &quot;Google&quot; in items -&gt; println(&quot;My Dream&quot;)</div><div class="line">&#125;        </div><div class="line"></div><div class="line">println(&quot;----------------&quot;)</div><div class="line"></div><div class="line">val fruits = listOf(&quot;banana&quot;, &quot;avocado&quot;, &quot;apple&quot;, &quot;kiwi&quot;)</div><div class="line">   fruits</div><div class="line">           .filter &#123; it.startsWith(&quot;a&quot;) &#125;</div><div class="line">           .sortedBy &#123; it &#125;</div><div class="line">           .map &#123; it.toUpperCase() &#125;</div><div class="line">           .forEach &#123; println(it) &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">I/System.out: Google</div><div class="line">I/System.out: Apple</div><div class="line">I/System.out: Amazon</div><div class="line">I/System.out: ----------------</div><div class="line">I/System.out: My Dream</div><div class="line">I/System.out: ----------------</div><div class="line">I/System.out: APPLE</div><div class="line">I/System.out: AVOCADO</div><div class="line">I/System.out: ----------------</div></pre></td></tr></table></figure>
<p>第一个是最普通的循环打印<br>接下来是 when 表达式，它只会执行一次<br>如果表达式是这样的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">when &#123;</div><div class="line">       &quot;Amazon&quot; in items -&gt; println(&quot;Change The World&quot;)</div><div class="line">       &quot;Google&quot; in items -&gt; println(&quot;My Dream&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">I/System.out: Google</div><div class="line">I/System.out: Apple</div><div class="line">I/System.out: Amazon</div><div class="line">I/System.out: ----------------</div><div class="line">I/System.out: Change The World</div><div class="line">I/System.out: ----------------</div><div class="line">I/System.out: APPLE</div><div class="line">I/System.out: AVOCADO</div><div class="line">I/System.out: ----------------</div></pre></td></tr></table></figure>
<p>后面的 Google 即使也在 items 集合里面但是也不会输出『My Dream』</p>
<p>最后就是链式调用了，让我想到了 RxJava ，首先通过 filter 过滤只留下『a』 开头的，然后应该是自然排序，接着通过 map 转换成大写，最后将每一个都输出。</p>
<h3 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h3><p>一只成长中的图图。</p>
<h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><p>参考自:<br> <a href="https://www.kotlincn.net/docs/tutorials/android-plugin.html" target="_blank" rel="external">https://www.kotlincn.net/docs/tutorials/android-plugin.html</a></p>
<p><a href="https://huanglizhuo.gitbooks.io/kotlin-in-chinese/content/GettingStarted/Basic-Syntax.html" target="_blank" rel="external">https://huanglizhuo.gitbooks.io/kotlin-in-chinese/content/GettingStarted/Basic-Syntax.html</a></p>
]]></content>
      
        
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[四月份总结]]></title>
      <url>/2017/05/01/April-Result/</url>
      <content type="html"><![CDATA[<h2 id="April。"><a href="#April。" class="headerlink" title="April。"></a>April。</h2><p> 今年的4月可能是我人生至今为止最黑暗的一个月。</p>
<p> 经历了太多太多。<br> <a id="more"></a><br> 先说说技术上的吧。自己搭建了博客，准备好好写技术文章，但是总感觉技术欠缺，至今也没写出一篇。</p>
<p> 痛苦已然过去，今天是五月一号。劳动节，而我却坐在办公室写下这篇文章，当然，并不是加班，而是我不知道该哪儿去，有点迷茫，有点错乱，找不到方向，感觉前方都是烟雾。</p>
<p> 这一个月，<br> 大起大落，<br> 这一个月，<br> 冷暖自知，<br> 这一个月，<br> 让我看懂了人心。</p>
<p> 今天是五月一号，都过去吧。<br> 正如我在 CSDN 某个大神的博客上看到的签名那样。<br> 孤独者，渴望被认可。</p>
<p> 确实，无处不在的孤独感，那又怎样。<br> 改变不了什么，那就接受，做得更好。</p>
<p> 感觉，又是一篇乱七八糟自以为是各种感慨的水文，作者肯定又在暗自下定决心好好学习，结果又是三天打鱼两天晒网。回过头来看看这篇文章，哈哈大笑。</p>
]]></content>
      
        
        <tags>
            
            <tag> Result </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解忧杂货店 读后感]]></title>
      <url>/2017/04/19/store/</url>
      <content type="html"><![CDATA[<h2 id="作者：东野圭吾"><a href="#作者：东野圭吾" class="headerlink" title="作者：东野圭吾"></a>作者：东野圭吾</h2><p>故事来自于街道深处的一家杂货店，只要在晚上把写了有关烦恼的信件丢进杂货店铁卷门上的投递口中，隔天早上就可以在店铺后面的牛奶箱里拿到回信。<br><a id="more"></a><br>首先讲到的是一个女运动选手和他男朋友的故事，男友一直很支持女友参加运动选拔，去迎接奥运会，但是在训练期间，男友患了不治之症，时日不多，女友很想放弃选拔，陪男友度过仅剩的日子，但男友坚持让女友参加训练，说这是他最后的心愿。女友烦恼中来到了杂货店，杂货店里的主人公知道日本将不会参加奥运会，所以就明确告诉女子，好好陪在男子身边，度过剩下的日子。</p>
<p>我在想，如果是你，一个是最爱的人，一个是最爱的人的梦想，你会选择哪个？</p>
<p>紧接着来了一个为音乐痴迷的追梦人，为音乐和父母吵架，为音乐休学，为音乐离家出走，独自一人在城市里打拼几年，却一事无成，但又不想就这么回去。家里外祖母的去世，才勉强回了家，看到亲戚对他的冷言冷语【听说你在大城市里？在哪工作啊？ 工资怎么样啊】 他默默不说话。在看着父亲为了他和亲戚吵架【我家的事你管这么多干嘛？】 这让他回想，是他做错了吗？偶然间来到了杂货店，店里的主人知道他以后会为救人而牺牲，他的自创歌曲《重生》也会红遍大江南北。劝他坚持下去，一定会在音乐道路上 越走越远的。</p>
<p>我在想，如果事先就知道走上这条路会死，还会为了梦想去坚持吗？《重生》，可能每个人都有不同的方式，而这个追梦人以牺牲自己拯救别人的方式以另一种方式活了下去，也算得上是“重生”吧。</p>
<p>接下来的故事讲述的是一个女子被男人抛弃，怀孕在身，不愿放弃孩子，但是生活开支支撑不了孩子的费用，后来咨询杂货店之后，自己做出了决定，留下孩子。之后的一段日子里。女子出车祸掉入湖中，孩子活了下来，后来孩子长大了，<br>埋怨父母丢弃他，再一次偶然间他知道了自己的身世，在一次车祸新闻中，他看到了他母亲的名字，熟悉的地名，绝对不会错的。新闻报道说【女子开车带孩自杀】他以为当时母亲带着他自杀，很自私。而事实的真相其实是母亲把所有的费用都省下来给孩子吃，自己长期缺乏营养的情况下，贫血晕倒，导致车祸的发生，而那个车子也是当时借的，目的是去医院，当时的孩子发烧了。 </p>
<p>我在想，如果是我，是会相信新闻呢？还是所谓的事实真相。</p>
<p>接下来的故事是一个上初中的富二代，后来家里人生意破产了，准备跑路，在逃跑的路上，富二代觉得父母是在逃避，如果跟着父母会一直躲躲藏藏，劝他们，他们又不会面对现实，承认错误。烦恼的他找到了杂货店，主人公劝他跟着家里人，一条心，后来逃跑的路上，富二代偷偷爬上了物流卡车，消失在视线中。直到几十年后，富二代有了新的生活，有次回到家乡，听说了几十年前那家人的父母带着孩子都自杀了。 富二代有点庆幸当初自己的选择，后来又觉得哪里不对……</p>
<p>最后也是最精彩的。一个想赚大钱的19岁女孩，杂货店告诉他未来20年的经济趋势，后来女的照做了，赚了大钱，回到家中的时候竟然被杂货店里的人绑架了。结局很引人深思。</p>
<p>可能这就是无意之举，涌泉相报。</p>
<p>整篇小说，每个人的命运仿佛都已经被固定，未来的人看得到历史的人的结果，历史的人收的到未来的人信息。看不见，摸不着，在小说中却真实存在的命运，仿佛一根根线牵扯着，拉伸着。</p>
<p>现实中命运之线牵扯着每个人，纵横交错的铺设，谁也不知道自己的命运之线把握在谁的手上，但是我想说的是，努力，挣扎的去奔跑，去飞翔，当力量大到可以扯断命运之线的时候，也就是掌握命运的时候了。</p>
<p>如果杂货店的人能事先告诉我最近所发生的事，那么我也没有机会写这篇文章了。</p>
<p>可能这就是命运。</p>
]]></content>
      
        
        <tags>
            
            <tag> 读后感 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[推荐一些 Mac 软件带破解]]></title>
      <url>/2017/04/17/Mac-app/</url>
      <content type="html"><![CDATA[<h1 id="Vysor"><a href="#Vysor" class="headerlink" title="Vysor"></a>Vysor</h1><h4 id="Vysor是一款Chrome应用（通过USB电缆，不支持Wi-Fi连接）共享手机屏幕在电脑上的插件，可以通过电脑点击，触摸，来控制手机，实现无延迟操作。"><a href="#Vysor是一款Chrome应用（通过USB电缆，不支持Wi-Fi连接）共享手机屏幕在电脑上的插件，可以通过电脑点击，触摸，来控制手机，实现无延迟操作。" class="headerlink" title="Vysor是一款Chrome应用（通过USB电缆，不支持Wi-Fi连接）共享手机屏幕在电脑上的插件，可以通过电脑点击，触摸，来控制手机，实现无延迟操作。"></a>Vysor是一款Chrome应用（通过USB电缆，不支持Wi-Fi连接）共享手机屏幕在电脑上的插件，可以通过电脑点击，触摸，来控制手机，实现无延迟操作。</h4><p>下载地址：<a href="https://chrome.google.com/webstore/detail/vysor/gidgenkbbabolejbgbpnhbimgjbffefm" target="_blank" rel="external">Chrome 商店（需要翻墙）</a></p>
<h4 id="默认是免费版本的速度只有500K，下面通过修改配置内容来达到4M-的速度。（亲测适用于1-7-2，1-7-3）"><a href="#默认是免费版本的速度只有500K，下面通过修改配置内容来达到4M-的速度。（亲测适用于1-7-2，1-7-3）" class="headerlink" title="默认是免费版本的速度只有500K，下面通过修改配置内容来达到4M 的速度。（亲测适用于1.7.2，1.7.3）"></a>默认是免费版本的速度只有500K，下面通过修改配置内容来达到4M 的速度。（亲测适用于1.7.2，1.7.3）</h4><ol>
<li>谷歌地址栏输入 chrome://version/ 打开关于 找到个人资料路径<br><img src="/images/route.jpg" alt=""><br>可能有些童鞋看不到文件夹，是因为 Mac 默认是不显示隐藏文件的。我们使用快捷键 command + shift + .    来开启或者关闭。<br>以下是我的路径/Users/tuhonghui/Library/Application Support/Google/Chrome/Default，然后打开Extensions文件夹，里面是你 Chrome 所有的插件。</li>
<li>地址栏输入chrome://extensions/，找到Vysor的版本号，去Extensions文件夹里打开相对应的文件夹。<a id="more"></a></li>
<li>找到uglify.js，打开编辑，搜索_il</li>
<li>把_il:Te.a() 替换为 _il:true</li>
<li>保存好，重新开启 Vysor。</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[A Few Words]]></title>
      <url>/2017/04/15/A-few-words/</url>
      <content type="html"><![CDATA[<ol>
<li><p>交朋友的标准是什么？<br>答：出世的智者，入世的强者，或者正常而阳光的普通人。</p>
</li>
<li><p>男性更看重女性的相貌，还是思想？<br>答：相貌决定我是否想去了解她的思想，思想决定我是否会一票否决她的相貌。</p>
</li>
<li><p>“别让孩子输在起跑线上”，有道理吗？<br>答：一辈子都要和别人比较，是悲剧的源头。</p>
</li>
<li><p>做哪些事情，可以提升生活品质？<br>答：有很多。其中之一是，定期扔废品。</p>
</li>
<li><p>结婚后两个人在一起，最重要的是什么？<br>答：就当这婚还没结。</p>
</li>
<li><p>怎么反驳“你行你上啊”的逻辑？<br>答：“我评论个电冰箱，自己还得会制冷？”</p>
<a id="more"></a></li>
<li><p>把钱拿来念书还是环游世界更合适？<br>答：读书。如果没有足够的知识，即使行了万里路，你也不过是个邮差。不是吗？</p>
</li>
<li><p>为什么有人会产生“聪明姑娘都被憨小伙儿搞定”的印象？<br>答：我觉得，要么姑娘只是看起来聪明，要么小伙儿只是看起来憨…</p>
</li>
<li><p>你心中的完美爱情是怎么样的？<br>答：可以有不完美。</p>
</li>
<li><p>生活阅历，改变了你的哪些“是非观”？<br>答：很多事情只是不同，并无是非。</p>
</li>
<li><p>是不是一个人越成熟就越难爱上一个人？<br>答：有点，人越大会越个色. 越固执，更愿意别人适应自己，而不是适应别人。但是越成熟，也越能分辨那是不是爱。</p>
</li>
<li><p>如何让这个世界变得美好？<br>答：把你自己变得更美好。</p>
</li>
<li><p>苦难有什么价值？<br>答：苦难就是苦难，苦难不值得追求。磨练意志？那是因为苦难无法躲开。</p>
</li>
<li><p>如何反驳“现实点，这个社会就是这样”？<br>答：“你是怎样，你的世界就是怎样。”</p>
</li>
<li><p>你对自由的理解是什么？<br>答：说“不”的能力。难吗？不难吗？</p>
</li>
<li><p>怎么看待励志的书籍？<br>答：开卷有益。可是，看再多，那都是别人的人生。</p>
</li>
<li><p>同样是别人比自己强，为什么有时会嫉妒，而有时会崇拜？<br>答：远的崇拜，近的嫉妒；够不着的崇拜，够得着的嫉妒；有利益冲突的嫉妒，没利益冲突的崇拜。</p>
</li>
<li><p>为什么当看到好照片时，人们通常的反应是“真不错，你用的是什么相机”，当看到烂照片时，则往往笑话拍摄者水平很臭？<br>答：人习惯性地将自己的成功归因于自身，失败归因于环境；而将他人的成功归因于环境，失败归因于其自身。</p>
</li>
<li><p>怎样在有效提出推荐或建议的同时，避免给人灌输和强迫的感觉？<br>答：说服他人不要诉诸理性，应求于利益。</p>
</li>
<li><p>哪些技能，经较短时间的学习，就可以给人的生活带来巨大帮助？<br>答：夸奖他人。</p>
</li>
<li><p>你是如何走出人生的阴霾的？<br>答：多走几步。</p>
</li>
<li><p>二十六岁，工作三年却将留学三年，值得吗？<br>答：普通玩家选择标准配置，高端玩家选择自定义配置。</p>
</li>
<li><p>如何看待“年轻时就释怀与淡泊，是没有希望的”这句话？<br>答：试图用一句话就来总结复杂的人生，是没有希望的。</p>
</li>
<li><p>要怎样努力，才能成为很厉害的人？<br>答：如果你注定要成为厉害的人，那问题的答案就深藏在你的血脉里；如果你注定不是厉害的人，那你便只需要做好你自己。</p>
</li>
<li><p>前半生与后半生的分界线是在哪里？<br>答：此时此刻。</p>
</li>
<li><p>你遇到过哪些让你眼前一亮. 醍醐灌顶的理念？<br>答：以绝大多数人的努力程度之低，远远没有达到要去拼天赋的地步。</p>
</li>
<li><p>人这一生为什么要努力？<br>答：最痛苦的事，不是失败，是我本可以。</p>
</li>
<li><p>在一个足够小的星球上行走，我们是在上坡还是下坡？<br>答：你感觉累就是上坡，感觉轻松就是下坡。</p>
</li>
<li><p>听过最落寞的一句话或诗句是什么？<br>答：不如意事常八九，可与言者无二三。</p>
</li>
<li><p>三十岁才开始学习编程靠谱吗？<br>答：种一棵树最好的时间是十年前，其次是现在。</p>
</li>
<li><p>向喜欢的女生表白被拒绝了，还是喜欢她，怎么办？<br>答：也许你弄错了什么是表白，表白应该是最终胜利时的号角，而不应该是发起进攻的冲锋号。</p>
</li>
<li><p>省钱的好办法有哪些？<br>答：在买任何东西之前牢记九字箴言：你喜欢，你需要，你适合。</p>
</li>
<li><p>“知行合一”到底如何理解？又怎样运用到实际生活中？<br>答：知道做不到，等于不知道。</p>
</li>
<li><p>什么叫见过大世面？<br>答：能享受最好的，能承受最坏的。</p>
</li>
<li><p>科学和迷信的分界点是哪里？<br>答：我错了。</p>
</li>
<li><p>扎克伯格初期是怎么保护 Facebook 创意的？为什么上线后没被其他大公司抄走？<br>答：保护创意的最好方法，就是将其最好地执行。</p>
</li>
<li><p>员工辞职最主要的原因是什么？<br>答：钱少事多离家远，位低权轻责任重。</p>
</li>
<li><p>你在生活中得到过的最好的建议是什么？<br>答：“过度自我关注是万恶之源”. “永远不要为尚未发生的事儿拧巴”. “觉得为时已晚的时候，恰恰是最早的时候”。</p>
</li>
<li><p>哪些行为是浪费时间？<br>答：思而不学+犹豫不决。</p>
</li>
<li><p>最能燃起你学习激情的一句话是什么？<br>答：你不能把这个世界，让给你所鄙视的人。</p>
</li>
<li><p>恋爱半年，女朋友觉得没有了开始时的新鲜感，怎么办？<br>答：所谓新鲜感，不是和未知的人一起去做同样的事情，而是和已知的人一起去体验未知的人生。</p>
</li>
<li><p>情商不高的例子有哪些？<br>答：对陌生人毕恭毕敬，对亲近的人随意发怒……</p>
</li>
<li><p>如何看待“年轻的时候需要的是朋友而不是人脉”？<br>答：没有目的之交往，才能感动人。</p>
</li>
<li><p>有哪些道理是你读了不信，听不进去，直到. 你亲身经历方笃信不疑的？<br>答：不要低估你的能力，不要高估你的毅力。</p>
</li>
</ol>
<p><a href="http://mp.weixin.qq.com/s/I6LiMZDjGsDzh8fjLrjJ4w" target="_blank" rel="external">转自知乎</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 励志 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tutu_Speak]]></title>
      <url>/2017/04/13/tutu_speak/</url>
      <content type="html"><![CDATA[<h3 id="1-年轻的时候不挑地方最好的，不挑钱最多的，而是挑最能让我成长的工作。"><a href="#1-年轻的时候不挑地方最好的，不挑钱最多的，而是挑最能让我成长的工作。" class="headerlink" title="1. 年轻的时候不挑地方最好的，不挑钱最多的，而是挑最能让我成长的工作。"></a>1. 年轻的时候不挑地方最好的，不挑钱最多的，而是挑最能让我成长的工作。</h3><h3 id="2-什么样的理由都解释不了我失败的事实。"><a href="#2-什么样的理由都解释不了我失败的事实。" class="headerlink" title="2. 什么样的理由都解释不了我失败的事实。"></a>2. 什么样的理由都解释不了我失败的事实。</h3><h3 id="3-经济不独立，靠山山会倒，靠水水会流，唯有靠自己，才是王道。"><a href="#3-经济不独立，靠山山会倒，靠水水会流，唯有靠自己，才是王道。" class="headerlink" title="3. 经济不独立，靠山山会倒，靠水水会流，唯有靠自己，才是王道。"></a>3. 经济不独立，靠山山会倒，靠水水会流，唯有靠自己，才是王道。</h3>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/04/13/hello-world/</url>
      <content type="html"><![CDATA[<h3 id="1-2017年04月13日20-31-35"><a href="#1-2017年04月13日20-31-35" class="headerlink" title="1. 2017年04月13日20:31:35"></a>1. 2017年04月13日20:31:35</h3><h3 id="2-记录一下自己的第一篇文章"><a href="#2-记录一下自己的第一篇文章" class="headerlink" title="2. 记录一下自己的第一篇文章"></a>2. 记录一下自己的第一篇文章</h3><h3 id="3-甩掉之前所有的不愉快"><a href="#3-甩掉之前所有的不愉快" class="headerlink" title="3. 甩掉之前所有的不愉快"></a>3. 甩掉之前所有的不愉快</h3><h3 id="4-人生没有什么坎是过不去的"><a href="#4-人生没有什么坎是过不去的" class="headerlink" title="4. 人生没有什么坎是过不去的"></a>4. 人生没有什么坎是过不去的</h3><h3 id="5-后面的日子我会努力"><a href="#5-后面的日子我会努力" class="headerlink" title="5. 后面的日子我会努力"></a>5. 后面的日子我会努力</h3><pre><code>tutu_oo
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> First </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
